mod SYSTEM is
  protecting SEM_ENTITY .
  protecting META-LEVEL .
  protecting SUBSTITUTION .

  sort Sys .
  subsort Entity < Sys .

  op _||_ : Sys Sys -> Sys [ctor assoc comm prec 9 id: #empty-sys] .
  op [_]_ : Qid Sys -> Sys [ctor prec 7] .
  op _++_ : Entity Entity -> Sys [ctor assoc comm prec 8] .
  op __ : Subst Proc -> Proc [ctor prec 1] .

  op #empty-sys : -> Sys [ctor] .
  *** Scope extension
  vars P P1 P2 : Proc .
  vars x y : Qid .

  var S : Subst .
  vars a b : Chan .

  eq [str-congruence] : [x] emptyproc = emptyproc .
  eq [str-congruence] : S emptyproc = emptyproc .
  ceq [str-congruence] : emptyproc ++ P = P if P =/= emptyproc .
  ceq [str-congruence] : [x] [y] P = [y] [x] P if string(y) < string(x) .
  eq [str-congruence] : S (tau . P) = tau . (S P) .
  eq [str-congruence] : S (a < b > . P) = (S a) < (S b) > . (S P) .
  eq [str-congruence] : S (a(x) . P) = (S a)(x) . ([lift x S] P) .
  eq [str-congruence] : S (! a(x) . P) = ! ((S a)(x)) . ([lift x S] P) .

  eq [str-congruence] : S ([x] P) = [x] ([lift x S] P) .
  eq [str-congruence] : S (P1 ++ P2) = (S P1) ++ (S P2) .
  ceq [str-congruence] : S (P1 || P2) = (S P1) || (S P2)
    if P1 =/= emptyproc and P2 =/= emptyproc .
  ceq [str-congruence] : [x] P1 || P2 = [x] (P1 || [shift x] P2)
    if P1 =/= emptyproc and P2 =/= emptyproc .

endm
