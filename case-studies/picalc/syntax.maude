fmod SYNTAX is
  protecting CINNI .
  
  *** Syntax definition
  sorts Guard Input .
  subsort Input < Guard .
  op tau : -> Guard [ctor] .
  op _<_> : Chan Chan -> Guard [ctor prec 4] .
  op _(_) : Chan Qid -> Input [ctor prec 3] .

  sort Term .
  op _|_ : Term Term -> Term [ctor assoc comm prec 9 id: nil] .
  op [_]_ : Qid Term -> Term [ctor prec 7] .
  op !_._ : Input Term -> Term [ctor prec 6] .

  sort SumTerm .
  subsort SumTerm < Term .
  op nil : -> SumTerm [ctor] .
  op _._ : Guard Term -> SumTerm [ctor prec 5] .
  op _+_ : SumTerm SumTerm -> SumTerm [ctor assoc comm prec 8 id: nil] .

  *** Scope extension
  vars P P1 P2 : Term .
  vars x y : Qid .

  eq [x] nil = nil .
  ceq [x] P1 | P2 = [x] (P1 | [shift x] P2) if P1 =/= nil and P2 =/= nil .
  ceq [x] [y] P = [y] [x] P if string(y) < string(x) .

  *** Substitution rules
  op __ : Subst Term -> Term [ctor prec 2] .

  var S : Subst .
  vars a b : Chan .

  eq S (tau . P) = tau . (S P) .
  eq S (a < b > . P) = (S a) < (S b) > . (S P) .
  eq S (a(x) . P) = (S a)(x) . ([lift x S] P) .
  ceq S (P1 | P2) = (S P1) | (S P2) if P1 =/= nil and P2 =/= nil .
  eq S ([x] P) = [x] ([lift x S] P) .
  eq S (! a(x) . P) = ! (S a)(x) . ([lift x S] P) .
  eq S nil = nil .
  eq S (P1 + P2) = (S P1) + (S P2) .
endfm
