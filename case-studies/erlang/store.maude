view Var from TRIV to SYNTAX is
  sort Elt to Var .
endv

view GroundValues from TRIV to SYNTAX-COMMON is
  sort Elt to GroundValues .
endv

fmod SEM_ENV is

  protecting META-LEVEL .
  protecting SYNTAX .
  protecting MAUDE-SYNTAX-UP .
  protecting COMMON-SYNTAX-DOWN .

  protecting MAP{Var, GroundValues} * (sort Entry{Var, GroundValues} to Entry,
                                       sort Map{Var, GroundValues} to Env ) .
  var ENV ENV' : Env .

  eq ENTRY, ENTRY = ENTRY .

  vars EX EX' : Exp .
  vars EXSEQ EXSEQ' : NeExpSeq .
  var PAT TAIL : Pattern .
  var VAR : Var .
  var ARGS : Args .

  op #init-env : NeExpSeq NeExpSeq -> Env .
  eq #init-env(#empty, EXSEQ) = empty .
  eq #init-env((EX, EXSEQ), (EX', EXSEQ')) = EX |-> EX', #init-env(EXSEQ, EXSEQ') .
  eq #init-env(EX, EX') = EX |-> EX' .

  op #map-args : Args Env -> List .

  eq #map-args([], ENV-STACK) = [] .
  eq #map-args([PAT], ENV) = [#map-arg(PAT, ENV)] .
  eq #map-args([PAT | TAIL], ENV) = [#map-arg(PAT, ENV)| #map-args(TAIL, ENV)] .
  eq #map-args(PAT, ARGS, ENV) = #map-args(PAT, ENV), #map-args(ARGS, ENV) .
  eq #map-args(PAT, ENV) = #map-arg(PAT, ENV) .

  op #map-arg : Pattern Env -> GroundValues .
  eq #map-arg(VAR, ENV) = ENV[VAR] .
  eq #map-arg(GVALUE, ENV) = GVALUE .

  sort EnvStack .
  subsort Env < EnvStack .

  op _:_ : EnvStack EnvStack -> EnvStack [ctor id: empty-stack] .
  op empty-stack : -> EnvStack .

	*******************************
  *** METAREPRESENTATION PART ***
	*******************************

  vars ENV-STACK ENV-STACK' : EnvStack .
  vars ENTRY ENTRY' : Entry .
  var PATT : Pattern .
  var GVALUE : GroundValues .
  vars T1 T2 : Term .
  var TERMS : TermList .

  op #up : Env -> Term [memo] .
  op #downEnv : Term -> Env [memo] .

  ceq #up((ENV, ENV')) = '_`,_[#up(ENV), #up(ENV')]
     if ENV' =/= empty /\ ENV =/= empty /\ ENV =/= empty-stack /\ ENV' =/= empty-stack .
  eq #up(empty) = 'empty.Env .

  eq #downEnv('_`,_[TERMS]) = #downEntry(TERMS) .
  eq #downEnv('_|->_[T1,T2]) = #downEntry('_|->_[T1,T2]) .
  eq #downEnv('empty.Env) = empty .

  op #up : Entry -> Term [memo] .
  op #downEntry : Term -> Env [memo] .

  eq #up(PATT |-> GVALUE) = '_|->_[#up(PATT), #up(GVALUE)] .

  ceq #downEntry((T1, TERMS)) = #downEntry(T1), #downEntry(TERMS)
  if TERMS =/= empty .
  eq #downEntry('_|->_[T1,T2]) = #downExp(T1) |-> #downExp(T2) .

  op #up : EnvStack -> Term [memo] .
  ceq #up(ENV-STACK : ENV-STACK') = '_:_[#up(ENV-STACK), #up(ENV-STACK')]
  if ENV-STACK =/= empty-stack /\ ENV-STACK' =/= empty-stack .
  eq #up(empty-stack) = 'empty-stack.EnvStack .

  op #downEnvStack : Term -> EnvStack [memo] .
  eq #downEnvStack('_:_[T1, T2]) = #downEnvStack(T1) : #downEnvStack(T2) .
  eq #downEnvStack('_`,_[TERMS]) = #downEnv('_`,_[TERMS]) .
  eq #downEnvStack('_|->_[T1,T2]) = #downEnv('_|->_[T1,T2]) .
  eq #downEnvStack('empty.Env) = #downEnv('empty.Env) .
  eq #downEnvStack('empty-stack.EnvStack) = empty-stack .
endfm

