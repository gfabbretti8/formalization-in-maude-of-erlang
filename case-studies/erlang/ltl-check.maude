***(

	LTL-CHECK.MAUDE

	This file contains the modules defining the predicates and the interface
	to the integrated model checker of the Maude system.

	The nodes of the computed LTS are terms of sort ProcessEnvironment.
	Intuitively, the system level label in the first component of each node-term
	indicates which system level transition leads to the corresponding process
	system. Note: The process system in such a node is already in normal form
	w.r.t. the directed equations of the equational theory.

	In order to be able to specify a scheduler (i.e. one could be interested
	only in those paths where starvation of processes due to the scheduler is
	prohibited) we also introduce the possibility of doing "nothing".
	This leads to a linear growth of the search space (in the worst case by
	a factor of 2) due to the sys-noop label that is introduced.
	Note: When a noop-operation takes place, the process system does not
	change. But the system level label is set to "sys-noop".

	With this approach, we are able to postulate a scheduling strategy as
	a global premise when model-checking LTL formulas.

	The monitored transitions on the system level (i.e. send and receive
	transitions, process termination, links, etc.) can be checked by the
	following predicates (not all listed):

	* send(PID1, PID2, CONST) 	: Process with PID1 sends the message
					  CONST to process with PID2
	* receive(PID, CONST)   	: Process with pid PID receives the message
					  CONST
	* newproc(PID)			: A new process with pid PID is created
					  (by a spawn or spawn-link system call)
	* terminate(PID)		: The process with pid PID terminates.
	* link(PID1,PID2)		: Two processes with pids PID1 and PID2
					  set up a process link (monitor each other)
	* unlink(PID1,PID2)		: The processes tear down the link.
***)

mod PREDICATES is
	protecting INT .
	protecting META-LEVEL .
	protecting META-UP-DOWN .
	protecting LTL .
	protecting LTL-SIMPLIFIER .
	protecting MODEL-CHECKER .
	protecting SYSTEM .
  protecting PARSING-SYNTAX-DOWN .
	including SATISFACTION .

	*** We extend the otherwise "empty" sort State of the Maude model checker
	*** with our process environment:
	subsort Sys < State .

	*** The scheduled predicate is valid iff the current state was reached by
	*** evaluating a side effect of the specified process.
	op scheduled : ErlInt -> Prop .

	*** The running predicate applies to a given state iff the specified
	*** process exists in the corresponding process environment.
	*** Note: This does not imply that it will ever be evaluated further
	***       due to the noop transition. It just states that the process
	***	  exists.
	op running : ErlInt -> Prop .

	*** The blocked predicate is valid iff the specified process of the
	*** current state is blocked (i.e. waiting for the arrival of a message
	*** within a receive-statement with infinity as a timeout)
	*** Note: This predicate does not apply to processes that are in
	***       the waiting state!
	op blocked : ErlInt -> Prop .

	*** The send predicate applies to a state iff it was reached by executing
	*** a send operation on the system level (the process given by the process
	*** identifier in the first argument sent the message in the last argument
	*** to the process that is identified by the second argument)
	op send : ErlInt ErlInt GroundValues  -> Prop .

  






	op #downProp : Term -> Prop .

	vars T1 T2 T3 : Term .

	eq #downProp('scheduled[T1]) = scheduled(#downErlInt(T1)) .
	eq #downProp('running[T1]) = running(#downErlInt(T1)) .
	eq #downProp('blocked[T1]) = blocked(#downErlInt(T1)) .
	eq #downProp('send[T1,T2,T3]) = send(#downErlInt(T1), #downErlInt(T2), #downExp(T3)) .

endm

mod LTL-FORMULAE is
	protecting SYNTAX .
	protecting PREDICATES .
	protecting MODEL-CHECKER .
	protecting META-UP-DOWN .

	*** In this module, we define the LTL formulas that allow specification of
	*** a scheduling strategy. They can be used during model checking as a premise
	*** to the "own" formula.
	var INT : Int .
	var IS : NeIntSeq .

	*** The scheduler "macro" takes a nonempty, comma-separated list of integers
	*** as argument. They specify the set of processes that are created and should
	*** be considered.
	op scheduler : NeIntSeq -> Formula .

	*** The LTL formula that is created simply states, that whenever a process
	*** exists it is either blocked or it is scheduled again later. The until
	*** formula asserts, that it is the next time that the same process is scheduled:
	*** If the process was terminated (and another "new" process was created that
	*** got the same pid), it would not exist at least at the state that directly
	*** results from the old process' termination.
	eq scheduler(eint(INT))
		= [](running(eint(INT)) -> (running(eint(INT)) U (scheduled(eint(INT)) \/ blocked(eint(INT))))) .

	eq scheduler(eint(INT), IS)
		= [](running(eint(INT)) -> (running(eint(INT)) U (scheduled(eint(INT)) \/ blocked(eint(INT))))) /\ scheduler(IS) .

	****************************************
	*** META REPRESENTATION PART         ***
	****************************************

	op #downLTL : Term -> Formula .
	eq #downLTL('scheduler[T1]) = scheduler(#downNeIntSeq(T1)) .

	sort NeIntSeq .
	subsort ErlInt < NeIntSeq .
    	op _,_ : NeIntSeq NeIntSeq -> NeIntSeq [ctor id: nil assoc prec 30 format (o m! o o)] .
    	op #downNeIntSeq : Term -> NeIntSeq .

	vars T1 T2 T3 : Term .
	var SUB : Substitution? .

	eq #downNeIntSeq('_`,_[T1, T2]) = #downErlInt(T2), #downNeIntSeq(T2) .
	eq #downNeIntSeq(T1) = #downErlInt(T1) [owise] .
endm

mod DOWN-LTL is
	protecting META-TERM .
	protecting PREDICATES .
	protecting LTL-FORMULAE .

	*** To be able to parse the LTL formulas given on the command line as part of the
	*** model-check command, we declare the corresponding #down operation:
	op #downLTL : Term -> Formula .

	vars T1 T2 : Term .

	eq #downLTL('True.Formula) = True .
	eq #downLTL('False.Formula) = False .

	eq #downLTL('~_[T1]) = ~ #downLTL(T1) .
	eq #downLTL('_/\_[T1,T2]) = #downLTL(T1) /\ #downLTL(T2) .
	eq #downLTL('_\/_[T1,T2]) = #downLTL(T1) \/ #downLTL(T2) .
	eq #downLTL('O_[T1]) = O #downLTL(T1) .
	eq #downLTL('_U_[T1,T2]) = #downLTL(T1) U #downLTL(T2) .
	eq #downLTL('_R_[T1,T2]) = #downLTL(T1) R #downLTL(T2) .
	eq #downLTL('_->_[T1,T2]) = #downLTL(T1) -> #downLTL(T2) .
	eq #downLTL('_<->_[T1,T2]) = #downLTL(T1) <-> #downLTL(T2) .
	eq #downLTL('<>_[T1]) = <> #downLTL(T1) .
	eq #downLTL('`[`]_[T1]) = [] #downLTL(T1) .
	eq #downLTL('_W_[T1,T2]) = #downLTL(T1) W #downLTL(T2) .
	eq #downLTL('_|->_[T1,T2]) = #downLTL(T1) |-> #downLTL(T2) .
	eq #downLTL('_=>_[T1,T2]) = #downLTL(T1) => #downLTL(T2) .
	eq #downLTL('_<=>_[T1,T2]) = #downLTL(T1) <=> #downLTL(T2) .

	eq #downLTL(T1) = #downProp(T1) [owise] .
endm

mod MODEL-CHECK-OUTPUT is
	protecting QID .
	protecting STRING .
	protecting SYNTAX .
	protecting PREDICATES .
	protecting LTL-FORMULAE .
	protecting MODEL-CHECKER .

	*** To be able to output the results of the model checker, we define
	*** the #PrintCounterexample operation which relies on the #PrintTransitionList
	*** and #PrintTransition operations.
	*** op #PrintModelCheckResult : ModelCheckResult -> QidList .
	*** op #PrintTransitionList : TransitionList -> QidList .
	*** op #PrintTransition : Transition -> QidList .

	*** var RULE : RuleName .
	*** vars TLIST1 TLIST2 : TransitionList .
	*** var T : Transition .

	*** var SL : SysLabel .
  *** 	var PRCS : Processes .
	*** var ME : ModEnv .
	*** var PIDS : PidSequence .

	*** var INT : Int .

	*** eq #PrintTransitionList(T TLIST1)
	*** 	= #PrintTransition(T) '\n #PrintTransitionList(TLIST1) .
	*** eq #PrintTransitionList(nil) = '\n .

	*** eq #PrintTransition({(SL, PRCS, ME, PIDS), RULE})
	*** 	= #PrintProcessEnv((SL, PRCS, ME, PIDS)) '\n .

	*** eq #PrintModelCheckResult(counterexample(TLIST1, TLIST2)) =
	*** 	#PrintTransitionList(TLIST1) '\n '\n
	*** 	'Zyklus: '\n '\n
	*** 	#PrintTransitionList(TLIST2) .
	*** eq #PrintModelCheckResult(true) = 'proof 'succeeded. '\n .
endm
