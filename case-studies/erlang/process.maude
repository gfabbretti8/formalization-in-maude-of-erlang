mod SEM_PROCESS is
  protecting MAUDE-SYNTAX-UPDOWN .
	protecting SEM_LABEL .

  protecting SEM_ENV .
	protecting SYNTAX .
  protecting SEM_MODENV .
  protecting SEM_ENTITY .

  protecting SEM_NORMALISATION .
  protecting QID .

	sort Process .
  subsort Process < Entity .

  op <_|_> : Pid AttributeSet -> Process [ctor frozen] .

  sorts ExpAtt ModEnvAtt EnvAtt StackAtt .
  subsorts ExpAtt ModEnvAtt EnvAtt < Attribute .

  sort EmptyExp .

  op exp:_ : NeExpSeq -> ExpAtt [ctor gather (&)] .
  op env-stack:_ : EnvStack -> EnvAtt [ctor gather (&)] .
  op mod-env:_ : ModEnv -> ModEnvAtt [ctor gather (&)] .

  *******************************
  *** METAREPRESENTATION PART ***
	*******************************

  op #up : Process -> Term [memo] .
	op #downProcess : Term -> Process [memo] .

  var STACK : Stack .
	var EX : Exp .
  var EXSEQ : NeExpSeq .
	vars T1 T2 T3 : Term .
  var P : Pid .
  var ME : ModEnv .
  var A : Attribute .
  var ASET : AttributeSet .
  var SUB : Substitution .
  var ENVSTACK : EnvStack .

	eq #up(< P | ASET >) = '<_|_>[#up(P),#up(ASET)] .

  ceq #up(A, ASET) = '_`,_[#up(A), #up(ASET)]
   if A =/= (none).AttributeSet /\ ASET =/= (none).AttributeSet .

  eq #up(exp: EXSEQ) = 'exp:_[#up(EXSEQ)] .
  eq #up(env-stack: ENVSTACK) = 'env-stack:_[#up(ENVSTACK)] .
  eq #up(mod-env: ME) = 'mod-env:_[#up(ME)] .

  eq #downEntity('<_|_>[T1,T2]) = < #downPid(T1) | #downAttributeSet(T2) > .
  ceq #downAttributeSet(T1) = #downAttribute(T2), #downAttributeSet(T3)
      if SUB := metaMatch(GRAMMAR, '_`,_['A:Attribute, 'ASET:AttributeSet], T1, nil, 0)
         /\ 'A:Attribute <- T2 ; 'ASET:AttributeSet <- T3 := SUB .

  eq #downAttributeSet(T1) = #downAttribute(T1) [owise] .

  eq #downAttribute('exp:_[T1]) = exp: #downExpSeq(T1) .
  eq #downAttribute('env-stack:_[T1]) = env-stack: #downEnvStack(T1) .
  eq #downAttribute('mod-env:_[T1]) = mod-env: #downModEnv(T1) .

endm
