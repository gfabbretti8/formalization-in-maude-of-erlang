***(

	PID.MAUDE

	The sort Pid defines the process identifier. It is modelled as an ordinary integer.
	The 2nd module specifies sequences of process identifiers; they are used to store
	the set of all existing processes, for example.
	Accordingly, we define some helper-functions that deal with

		* finding new (unused) PIDs for	new processes.
		* inserting a new PID in a sequence of PIDS
***)

mod SEM_PID is
	protecting INT .
	protecting MAUDE-SYNTAX-UPDOWN .
  protecting SEM_ENTITY .

	sort PidGen Pid .
  subsort PidGen < Entity .
	op pid : Int -> Pid [ctor] .
  op pidGen : Int -> PidGen [ctor] .

	op #empty-pid : -> PidGen [ctor] .

	var INT : Int .
	var T : Term .

	*******************************
  *** METAREPRESENTATION PART ***
	*******************************

	op #up : Pid -> Term [memo] .
	op #up : PidGen -> Term [memo] .
	*** Meta-representing pids
	eq #up(pid(INT)) = 'pid[#up(INT)] .
  eq #up(pidGen(INT)) = 'pidGen[#up(INT)] .

	op #downPid : Term -> Pid [memo] .
  op #downPidGen : Term -> PidGen [memo] .
	*** Lowering the meta-representation level of pids
	eq #downPid('pid[T]) = pid(#downInt(T)) .
  eq #downEntity('pidGen[T]) = #downPidGen('pidGen[T]).
  eq #downPidGen('pidGen[T]) = pidGen(#downInt(T)) .

endm
