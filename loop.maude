***(

	LOOP.MAUDE

	In this module we define the LOOP-MODE interface for user interaction on the
	command line of the Maude interpreter.

	In the functional module COMMAND-GRAMMAR, we specify a set of commands that can
	be used from within the Maude command line to control the actions of the system:
		* loading a Core-Erlang source file
		* specifying a statement and computing the states
		* starting the model checker

	To output the states that are computed, we define the STATESPACE-OUTPUT functional
	module. It calculates all the states and outputs them correspondingly.

	The ERLANG-LOOP module finally implements the interface to Maude's input/output
	subsystem and defines rewriting rules that implement the commands.
	Note: The model checker uses the equational theory and the rewriting theory of
	      the module in which it is started; therefore our theory has to be included
	      into the ERLANG-LOOP module (it starts the model-checking computation)
***)

fmod COMMAND-GRAMMAR is
	protecting PARSING-SYNTAX .

	*** The commands that may be issued to the system are terms of sort Command.
	sort Command .

	*** The add-module directive includes the function definitions from
	*** the Core-Erlang module that is given as an argument.
	*** Note: Use the (Core-Erlang) output of the Erlang compiler; the "maudify"
	***       tool automatically clears up the syntax. Additionally one has to
	***       put brackets around the function definitions within the Core-Erlang
	***	  source-code.
	op add-module : Program Atom -> Command [ctor] .

  op fwd-step : -> Command [ctor] .
endfm

fmod FORWARD-EXPLORATION is
  protecting META-LEVEL .
	protecting SEM_PROCESSESENVIRONMENT .

  op #computeFwdSteps : Sys -> Sys [frozen] .

  var RES : ResultPair .
  var SYS : Sys .

  eq #computeFwdSteps(SYS) = #downSys(getTerm(metaRewrite(['THEORY], #up(SYS), unbounded))) .


endfm

mod ERLANG-LOOP is
	protecting QID .
	protecting META-LEVEL .
	including LOOP-MODE .
	protecting PARSING-SYNTAX-DOWN .
	protecting PRINT-SYNTAX-ERROR .
	protecting MAUDE-SYNTAX-UP .
  protecting SEM_PROCESSESENVIRONMENT .
  protecting FORWARD-EXPLORATION .


	*** This system module is a simple interface to Maude's LOOP-MODE module.
	*** We use LOOP-MODE as the input/output facility. If a command according
	*** to the command grammar above is input in parenthesis (s.t. it is recognized
	*** as input to the loop), we execute the corresponding actions by rewriting.

	*** To distinguish different phases during command execution: We accept input
	*** in the idle phase. After parsing the quoted identifiers that were input,
	*** we end up in the parsed or error phase.
	sort Phase .
	op idle : -> Phase .
	op parsed : -> Phase .
	op error : -> Phase .

	sort ParseResult .
	subsort Term < ParseResult .
	op #no-parse : -> ParseResult .


  op init : -> System .
	eq init = [nil, < idle, #no-parse, (sys-start, #empty-mbox, #empty-processes, #empty-modenv, #empty-pid-seq) >, nil] .

	*** the state-component of the loop-mode tuple
	op <_,_,_> : Phase ParseResult Sys -> State [frozen] .

	vars QIL QIL' : QidList .
	vars T T1 T2 : Term .
	var Result : ResultPair? .
  var SYS : Sys .


	crl [in] : [QIL, < idle, #no-parse, SYS >, QIL']
		=> if Result :: ResultPair
		   then
			[nil, < parsed, getTerm(Result), SYS >, 'command 'parsed 'complete '\n]
		   else
			[nil, < error, #no-parse, SYS >, printSyntaxError(Result, QIL)]
		   fi
	    if QIL =/= nil /\
	       Result := metaParse(GRAMMAR, QIL, 'Command) .

	rl [add-module] : [nil, < parsed, 'add-module[T1,T2], SYS >, QIL']
		=> [nil, < idle, #no-parse, (#setup-first-proc(#update-process-environment(SYS, #downFunDefSeq(T1)),#downExp(T2))) >, QIL' 'module 'included '.] .

  rl [fwd-step] : [nil, < parsed, 'fwd-step.Command, SYS >, QIL' ]
     => [nil, < idle, #no-parse, (#computeFwdSteps(SYS)) >, QIL' 'steps 'performed '\n'] .
endm
