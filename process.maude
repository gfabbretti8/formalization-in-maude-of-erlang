***(

	PROCESS.MAUDE

	This file contains the functional modules that define our representation of the
	state of a set of concurrently running Core-Erlang processes.

	The SEM_PROCESS functional module defines ...

	The next module (SEM_PROCESSES) models a process system. This is a set of independent,
	concurrently running processes. It is represented by an associative and commutative
	list where the processes are separated by ||.

	We consider such a set of concurrently running processes, together with some
	additional information (such as the transition that led to the state) as a process
	environment. The term-representation is defined in the third module (SEM_PROCESSENVIRONMENT).

	Last but not least, the PROCESS-OUTPUT module defines some helper functions that
	are needed in order to pretty print and output a readable representation of a process
	environment.

***)


fmod SEM_PROCESS is
  protecting MAUDE-SYNTAX-UPDOWN .
	protecting SEM_LABEL .
	protecting SEM_RESULT .
	protecting SYNTAX .
	protecting SEM_PID .

	sort Process .
	op <_|_|_|_> : Label SysResult Exp Pid -> Process [ctor] .

  *******************************
  *** METAREPRESENTATION PART ***
	*******************************

	op #up : Process -> Term [frozen memo] .
	op #downProcess : Term -> Process [memo] .

	var EX EX1 EX2 : Exp .
  var P : Process .
	vars T1 T2 T3 T4 T5 T6 T7 T8 : Term .
  var RES : SysResult .
  var PID : Pid .
  var L : Label .

	eq #up(< L | RES | EX | PID  >) = '<_|_|_|_>[#up(L), #up(RES), #up(EX), #up(PID)] .

	eq #downProcess('<_|_|_|_>[T1,T2,T3,T4])
    = < #downLabel(T1)
    | #downSysResult(T2)
    | #downExp(T3)
    | #downPid(T4) > .

endfm

fmod SEM_PROCESSES is
	protecting SEM_PROCESS .
	protecting MAUDE-SYNTAX-UPDOWN .

	*** A process system is modelled as an associative and commutative list of processes
	*** as defined in SEM_PROCESS. The processes are separated by "||". Additionally, we
	*** introduce #empty-processes as the identity element. This reduces the cases that
	*** have to be distinguished when matching left hand sides of (directed) equations
	*** and rules (we do not have to care about a one-elementary list; it is automatically
	*** extended by the identity element).
	sort Processes .
	subsort Process < Processes .

	op #empty-processes : -> Processes [ctor] .
	op _||_ : Processes Processes -> Processes [ctor assoc comm id: #empty-processes] .

	*******************************
  *** METAREPRESENTATION PART ***
	*******************************

	op #up : Processes -> Term [frozen memo] .
	op #downProcesses : Term -> Processes [memo] .

	var P : Process .
	var PRCS : Processes .
	var SUB : Substitution .
	vars T T1 T2 : Term .

	eq #up(#empty-processes) = '#empty-processes.Processes .
	ceq #up(P || PRCS) = '_||_[#up(P), #up(PRCS)]
		if (PRCS =/= #empty-processes) .

	eq #downProcesses('#empty-processes.Processes) = #empty-processes .
	ceq #downProcesses(T) = #downProcess(T1) || #downProcesses(T2)
		if SUB := metaMatch(GRAMMAR, '_||_['P:Process, 'PRCS:Processes], T, nil, 0)
		/\ 'P:Process <- T1 ; 'PRCS:Processes <- T2 := SUB .
endfm


fmod SEM_PROCESSESENVIRONMENT is
	protecting SEM_SYSLABEL .
	protecting SEM_PROCESSES .
	protecting SEM_MODENV .
	protecting SEM_PID_SEQUENCE .
	protecting MAUDE-SYNTAX-UPDOWN .
  protecting SEM_MAILBOX .

	*** The process environment consists of four components:
	*** 1. The system level label. This label indicates the transition (on the
	***    system level, therefore a side-effect took place) that led to the
	***    process system.
	*** 2. The process system (i.e. set of all processes). Note: Due to our
	***    underlying equational theory, the processes are grouped into equivalence
	***    classes. The classes are represented by the normal forms according to
	***    the equational theory.
	*** 3. The current module environment. Processes that are created during
	***    system evaluation get this environment as their local copy. We store the
	***    module environment in the process system _and_ in every process. Currently,
	***    they are identical; but one could also model inter-module calls as
	***    system level transitions querying the global module environment. This
	***    could be a first step towards specifying the semantics of hot code replacement.
	*** 4. The sequence of PIDs that are currently in use.
	sort Sys .

	op ((_,_,_,_,_)) : SysLabel Mailbox Processes ModEnv PidSequence -> Sys [ctor] .

	op #update-process-environment : Sys FunDefSeq -> Sys .

	op #setup-first-proc : Sys Atom -> Sys .

	var SL : SysLabel .
	var PRCS : Processes .
	var ME : ModEnv .
	var PIDS : PidSequence .
	var MOD : FunDefSeq .
  var ENTRYPOINT : FunName .
  var MBOX : Mailbox .


	eq #update-process-environment((SL, MBOX, PRCS, ME, PIDS),MOD) = (SL, MBOX, PRCS, (#extract-functions(MOD)), PIDS) .

  eq #setup-first-proc((SL, MBOX, PRCS, ME, PIDS),ENTRYPOINT)
     = (SL, MBOX, < tau | #no-res | #get-function(ENTRYPOINT, ME) | pid(0) >, ME, pid(0)) .

	*******************************
  *** METAREPRESENTATION PART ***
	*******************************

	op #up : Sys -> Term [frozen memo] .
	op #downSys : Term -> Sys [memo] .

	vars T1 T2 T3 T4 T5 : Term .

	eq #up((SL, MBOX, PRCS, ME, PIDS)) = '`(_`,_`,_`,_`,_`)[#up(SL), #up(MBOX), #up(PRCS), #up(ME), #up(PIDS)] .
	eq #downSys('`(_`,_`,_`,_`,_`)[T1,T2,T3,T4,T5])
		= (#downSysLabel(T1), #downMailbox(T2), #downProcesses(T3), #downModEnv(T4), #downPidSequence(T5)) .
endfm

