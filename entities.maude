mod SEM_ENTITIES is
	protecting MAUDE-SYNTAX-UPDOWN .
	protecting SEM_ENTITY .
  protecting SEM_PROCESS .
  protecting SEM_MESSAGE .
  protecting SEM_PID_SEQUENCE .

  sort Entities .
  subsort Entity < Entities .

	op #empty-entities : -> Entities [ctor] .
	op _||_ : Entities Entities -> Entities [ctor assoc comm id: #empty-entities] .

  op #setup-first-proc : Entities FunName FunDefSeq -> Entities .

  var ENTRYPOINT : FunName .
  var ENTS : Entities .
  var MOD : FunDefSeq .
  var EX : Exp .
  var ME : ModEnv .

  ceq #setup-first-proc(ENTS, ENTRYPOINT, MOD) =
      < pid(0) | label: tau, sys-res: #no-res, exp: EX, mod-env: ME > || pid(0)
    if ME := #extract-functions(MOD) /\
       EX := #get-function(ENTRYPOINT, ME) .

	*******************************
  *** METAREPRESENTATION PART ***
	*******************************

	op #up : Entities -> Term [memo] .
	op #downEntities : Term -> Entities [memo] .

  var E : Entity .
	var SUB : Substitution .
	vars T T1 T2 : Term .

	eq #up(#empty-entities) = '#empty-entities.Entities .
	eq #up(E || ENTS) = '_||_[#up(E), #up(ENTS)] .

	eq #downEntities('#empty-entities.Entities) = #empty-entities .
	ceq #downEntities(T) = #downEntity(T1) || #downEntities(T2)
  if SUB := metaMatch(GRAMMAR, '_||_['E:Entity, 'ENTS:Entities], T, nil, 0)
		/\ 'E:Entity <- T1 ; 'ENTS:Entities <- T2 := SUB .

endm
