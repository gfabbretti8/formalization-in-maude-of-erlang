***(

	SYSTEM.MAUDE

	This module defines the system level transitions. This is the rewriting theory
	that operates upon the equivalence classes that are defined by the underlying
	equational theory (given in the functional modules SEM_EQUATIONS and its submodules).

	In contrast to the oriented equations and equational attributes that constitute
	the MEL theory, the rewriting rules do not have to terminate or to be Church Rosser.

	They represent the observable actions that the system can do. In our approach, we try
	to move as many local evaluation steps as possible into the equational theory. This
	reduces the search space significantly (for example, interleaving is not necessary
	if completely autonomous steps are taken within different processes).
	The rewriting rules that are specified here represent evaluation steps that may not
	be included in the equational theory as they imply side effects onto other processes.

	The transition rules of the "system"-level are collected in the SEM_TRANSITION
	module.

	The functional module that constitutes the equational theory includes the different
	sets of oriented equations and is called SEM_EQUATIONS.

	The whole theory, consisting of the rewriting rules and the equational theory
	is then given by the module THEORY.

***)

mod SEM_TRANSITIONS is
	protecting SYNTAX .
	protecting SEM_LABEL .
	protecting SEM_ENTITIES .
  protecting SEM_MATCH_ENTITY .
  protecting SEM_NORMALISATION .

	var EX : Exp .
  var EXSEQ EXSEQ' : ExpSeq .
  var ARGS ARGS' : Args .
	var P : Pid .
	vars INT INT1 : Int .
	var ME : ModEnv .
	vars GVALUE : GroundValues .
  var A : Atom .
	var EL : Label .
  var CLSEQ : ClauseSeq .
  var MSG : Message .
  vars ASET ASET' : AttributeSet .
  var ENTS : Entities .
  vars STORE STORE' : Store .
  var ENTRYPOINT : FunName .
  var MOD : FunDefSeq .
  vars STACK STACK' : Stack .

	*******************************
  ******** INIT FUNCTION ********
	*******************************

  op #setup-first-proc : Entities FunName FunDefSeq GroundValues -> Entities .
  ceq #setup-first-proc(ENTS, ENTRYPOINT, MOD, ARGS)
      = < pid(0) | exp: EXSEQ, mod-env: ME, store: STORE, stack: emptyStack > || pidGen(0)
      if ME := #extract-functions(MOD) /\ EXSEQ := #get-function(ENTRYPOINT, ME) /\
         STORE := #init-store(#get-formal-args(ENTRYPOINT, ME), ARGS) .

	*******************************
  ******** SYSTEM RULES  ********
	*******************************

  crl [sys-tau] :
      < P | exp: EXSEQ, store: STORE, stack: STACK, ASET >  =>
      < P | exp: EXSEQ', store: STORE', stack: STACK', ASET >
      if < tau, STORE', EXSEQ', STACK' > :=
         < empty, STORE, EXSEQ, STACK > .

  crl [sys-crash] :
      < P | exp: EXSEQ, store: STORE, stack: STACK, ASET >  =>
      < P | exp: #crashed, store: STORE', stack: STACK', ASET >
      if < crashed, STORE', EXSEQ', STACK' > :=
         < empty, STORE, EXSEQ, STACK > .
endm

mod SEM_EQUATIONS is
	protecting SYNTAX .
	protecting SEM_NORMALISATION .
  protecting SEM_COREBIB .
endm

mod THEORY is
	protecting SYNTAX .
	protecting SEM_EQUATIONS .
  protecting SEM_TRANSITIONS .
endm
