mod SEM_NORMALISATION is
	protecting SYNTAX .
  protecting HELP-SYNTAX .
  protecting SEM_ENTITIES .
  protecting SEM_MATCH_ENTITY .
  protecting SEM_LABEL .


  vars LABEL LABEL' : Label .
  vars STORE STORE' : Store .
  var EXPSEQ : ExpSeq .
  var GVALUE : GroundValues .
  vars STACK STACK' : Stack .
  vars T1 T2 T3 T4 : Term .
  var VAR : Var .
  vars EXSEQ EXSEQ' : ExpSeq .
  var EX EX' : Exp .

  sort ExpConf .
  op <_,_,_,_> : Label Store ExpSeq Stack -> ExpConf [ctor] .


  op #up : ExpConf -> Term [memo] .
  eq #up(< LABEL, STORE, EXPSEQ, STACK >)
      = '<_`,_`,_`,_>[#up(LABEL), #up(STORE), #up(EXPSEQ), #up(STACK)] .

  op #downExpConf : Term -> ExpConf [memo] .
  eq #downExpConf('<_`,_`,_`,_>[T1,T2,T3,T4])
     = < #downLabel(T1), #downStore(T2), #downExpSeq(T3), #downStack(T4) > .


   ceq [var] :
    < empty, STORE, VAR, STACK > =
    < crashed, STORE, VAR, STACK >
    if STORE[VAR] == undefined .

   ceq [var] :
    < empty, STORE, VAR, STACK > =
    < tau, STORE, STORE[VAR], STACK >
    if STORE[VAR] =/= undefined .

   ceq [match] :
    < empty, STORE, VAR = GVALUE, STACK > =
    < tau, STORE', GVALUE, STACK >
    if STORE[VAR] == undefined /\
       STORE' := insert(VAR, GVALUE, STORE) .

   ceq [match] :
    < empty, STORE, VAR = GVALUE, STACK > =
    < crashed, STORE, VAR = GVALUE, STACK >
    if STORE[VAR] =/= undefined .

   ceq [match] :
    < empty, STORE, VAR = EX, STACK > =
    < LABEL', STORE, VAR = #hole, STACK > .



   eq [seq] :
    < empty, STORE, GVALUE, EXPSEQ, STACK > =
    < tau, STORE, EXPSEQ, STACK > .

   ceq [seq] :
    < empty, STORE, EX, EXSEQ, STACK > =
    < LABEL', STORE', EXSEQ', EXSEQ, STACK' >
    if < LABEL', STORE', EXSEQ', STACK' > :=
       < empty, STORE, EX, STACK > .


endm

