view Var from TRIV to SYNTAX is
  sort Elt to Var .
endv

view GroundValues from TRIV to SYNTAX-COMMON is
  sort Elt to GroundValues .
endv

fmod SEM_STORE is

  protecting META-LEVEL .
  protecting SYNTAX .
  protecting MAUDE-SYNTAX-UP .
  protecting COMMON-SYNTAX-DOWN .

  protecting MAP{Var, GroundValues} * (sort Entry{Var, GroundValues} to Entry,
                                       sort Map{Var, GroundValues} to Store ) .
  var MAP : Store .

  eq ENTRY, ENTRY = ENTRY .

  vars EX EX' : Exp .
  vars EXSEQ EXSEQ' : ExpSeq .
  var PAT TAIL : Pattern .
  var VAR : Var .


  op #init-store : ExpSeq ExpSeq -> Store .
  eq #init-store((EX, EXSEQ), (EX', EXSEQ')) = EX |-> EX', #init-store(EXSEQ, EXSEQ') .
  eq #init-store(#empty, EXSEQ) = empty .
  eq #init-store(EX, EX') = EX |-> EX' .

  op #extract-and-map-args : Pattern Store -> Args .
  eq #extract-and-map-args([], STORE) = #empty .
  eq #extract-and-map-args([PAT], STORE) = #map-arg(PAT, STORE) .
  eq #extract-and-map-args([PAT | TAIL], STORE) = #map-arg(PAT, STORE), #extract-and-map-args(TAIL, STORE) .
  eq #extract-and-map-args(PAT, STORE) = #map-arg(PAT, STORE) .

  op #map-args : Pattern Store -> List .
  eq #map-args([], STORE) = [] .
  eq #map-args([PAT], STORE) = [#map-arg(PAT, STORE)] .
  eq #map-args([PAT | TAIL], STORE) = [#map-arg(PAT, STORE)| #extract-and-map-args(TAIL, STORE)] .
  eq #map-args(PAT, STORE) = #map-arg(PAT, STORE) .

  op #map-arg : Pattern Store -> GroundValues .
  eq #map-arg(VAR, STORE) = STORE[VAR] .
  eq #map-arg(GVALUE, STORE) = GVALUE .

	*******************************
  *** METAREPRESENTATION PART ***
	*******************************

  vars STORE STORE' : Store .
  vars ENTRY ENTRY' : Entry .
  var PATT : Pattern .
  var GVALUE : GroundValues .
  vars T1 T2 : Term .
  var TERMS : TermList .

  op #up : Store -> Term [memo] .
  op #downStore : Term -> Store [memo] .

  ceq #up((STORE, STORE')) = '_`,_[#up(STORE), #up(STORE')]
     if STORE' =/= empty /\ STORE =/= empty .
  eq #up(empty) = 'empty.Store .

  eq #downStore('_`,_[TERMS]) = #downEntry(TERMS) .
  eq #downStore('_|->_[T1,T2]) = #downEntry('_|->_[T1,T2]) .
  eq #downStore('empty.Store) = empty .

  op #up : Entry -> Term [memo] .
  op #downEntry : Term -> Store [memo] .

  eq #up(PATT |-> GVALUE) = '_|->_[#up(PATT), #up(GVALUE)] .

  ceq #downEntry((T1, TERMS)) = #downEntry(T1), #downEntry(TERMS)
  if TERMS =/= empty .
  eq #downEntry('_|->_[T1,T2]) = #downExp(T1) |-> #downExp(T2) .


  sort StoreStack .
  subsort Store < StoreStack .
  subsort Entry < StoreStack .

  op _:_ : StoreStack StoreStack -> StoreStack [ctor id: empty-stack] .
  op empty-stack : -> StoreStack .

  op #up : StoreStack -> Term [memo] .
  eq #up(STORE : STORE') = '_:_[#up(STORE), #up(STORE')] .

  op #downStoreStack : Term -> StoreStack [memo] .
  eq #downStoreStack('_:_[T1, T2]) = #downStoreStack(T1) : #downStoreStack(T2) .
  eq #downStoreStack('_`,_[TERMS]) = #downStore('_`,_[TERMS]) .
  eq #downStoreStack('_|->_[T1,T2]) = #downStore('_|->_[T1,T2]) .

endfm

