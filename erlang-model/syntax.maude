fmod SYNTAX-COMMON is

  sort Program .
  subsort FunDefSeq < Program .

  sorts Exp ExpSeq NeExpSeq .

  subsorts Exp < NeExpSeq < ExpSeq .

  op nil : -> ExpSeq [ctor] .
  op _,_ : ExpSeq ExpSeq -> ExpSeq [ctor assoc id: nil prec 51 format (o m! o o)] .
  op _,_ : NeExpSeq ExpSeq  -> NeExpSeq [ditto] .
  op _,_ : ExpSeq NeExpSeq -> NeExpSeq [ditto] .

  op begin_end : NeExpSeq -> Exp [ctor prec 70 format (o m! o m!)] .

  op #bottom : -> Exp .
  op #crashed : -> Exp .

  sort GroundValues .
  subsorts ListOfGroundValues Atom ErlInt < GroundValues .
  subsort GroundValues < Exp .

  sorts List ListOfGroundValues ListOfPatterns Nil .
  subsort Nil < List .
  subsort List < Exp GroundValues Pattern .

  subsort ListOfGroundValues < List .

  op [] : -> Nil [ctor].

  op [_] : Exp -> List [ctor prec 15 gather (&) format (m! o m! o)] .
  op [_|_] : Exp Exp -> List [ctor prec 20 gather (& &) format (m! o m! o m! o)] .

  op [_] : GroundValues -> ListOfGroundValues [ctor prec 15 gather (&) format (m! o m! o)] .
  op [_|_] : GroundValues GroundValues -> ListOfGroundValues [ctor prec 20 gather (& &) format (m! o m! o m! o)] .

  sort Atom .
  sort ErlInt .

  sort Var .
  subsort Var < Exp .

  sort Pattern .
  subsorts GroundValues Var < Pattern .
  subsorts Pattern < Exp .

  sort Mult .
  subsort Mult < Exp .

  op _*_ : Exp Exp -> Mult [ctor prec 15] .

  sort Minus .
  subsort Minus < Exp .

  op _-_ : Exp Exp -> Minus [ctor prec 15] .

  sort Match .
  subsort Match < Exp .
  op _=_ : Pattern Exp -> Match [ctor prec 25 format (o o m! o)] .

  sort Clause .
  sort ClauseSeq .
  subsort Clause < ClauseSeq .

  op _->_ : Pattern ExpSeq -> Clause [ctor prec 51 format (o m! o o)] .
  op _;_ : ClauseSeq ClauseSeq -> ClauseSeq [ctor assoc prec 52 format (o o m! o)].

  sort Case .
  subsort Case < Exp .

  op case_of_end : Exp ClauseSeq -> Case [ctor prec 50 format (m! o m! o m! o)] .

  sorts FunDef FunName FunDefSeq FunCall .
  subsort Atom < FunName .
  subsort FunDef < FunDefSeq .
  subsort FunCall < Exp .

  sort Args .
  subsort Args < Exp .
  subsort Pattern GroundValues < Args .

  op #empty : -> Args .

  op _,_ : Args Args -> Args [ctor assoc id: nil prec 60 format (o m! o o)] .

  op fun_()->_. : FunName NeExpSeq -> FunDef [ctor prec 70 format (m! o m! m! m! o m! o)] .
  op fun_(_)->_. : FunName Args NeExpSeq -> FunDef [ctor prec 70 format (m! o m! o m! m! o m! o)] .
  op __ : FunDefSeq FunDefSeq -> FunDefSeq [ctor assoc prec 71 format(o o o)] .
  op _() : Exp -> FunCall [ctor prec 10 format (o m! m! o)] .
  op _(_) : Exp Args -> FunCall [ctor prec 10 format (o m! o m! o)] .
  op _:_(_) : Exp Exp Args -> FunCall [ctor prec 10 format (o o m! m! o m! o )] .

  sort Send .
  subsort Send < Exp .

  op _!_ : Exp Exp -> Send [ctor prec 35 format (o m! o o)] .

  sort Receive ReceiveClause ReceiveClauseSeq .
  subsort Receive < Exp .
  subsort ReceiveClause < Clause .
  subsort ReceiveClauseSeq < ClauseSeq .

  op receive_end : ClauseSeq -> Receive [ctor prec 35 format (m! o m! o)].

endfm

fmod SYNTAX is
	extending SYNTAX-COMMON .
	protecting STRING .
	protecting INT .

  op var : String -> Var [ctor format (b o)] .
	op atom : String -> Atom [ctor format (b o)] .
	op int : Int -> ErlInt [ctor format (b o)] .

endfm

fmod PARSING-SYNTAX is
	protecting META-LEVEL .
	extending SYNTAX .
	sort Token .

	subsort NeTokenList Token < Atom ErlInt Var .

	sort NeTokenList .
	subsort Token < NeTokenList .
	op _,_ : NeTokenList NeTokenList -> NeTokenList [ctor assoc id: nil prec 65  format (o m! o o)] .


endfm

------------------------------------------------------------------------------------------

--- INTERNAL-SYNTAX

------------------------------------------------------------------------------------------

fmod MAUDE-SYNTAX-UP is
	protecting SYNTAX .
	protecting META-LEVEL .
	protecting META-UP-DOWN .

	*******************************
  *** METAREPRESENTATION PART ***
	*******************************

	var STR : String .
	var INT : Int .
	var CHR : Char .

	op #up : Atom -> Term [memo] .
	op #up : Var -> Term [memo] .
	op #up : ErlInt -> Term [memo] .

	eq #up(var(STR)) = 'var[#up(STR)] .
	eq #up(atom(STR)) = 'atom[#up(STR)] .
	eq #up(int(INT)) = 'int[#up(INT)] .
	eq #up([]) = '`[`].Nil .

	var ATOM : Atom .
  var FNAME : FunName .
  var PAT ARGS : Pattern .
	vars EX EX1 EX2 EX3 : Exp .
  var EXSEQ EXSEQ' : ExpSeq .
  vars CLS CLS1 CLS2 : ClauseSeq .

	op #up : ExpSeq -> Term [memo] .

	ceq #up(EXSEQ, EXSEQ') = '_`,_[#up(EXSEQ), #up(EXSEQ')]
     if EXSEQ =/= nil /\ EXSEQ' =/= nil .

  op #up : Exp -> Term [memo] .

  eq #up(#crashed) = '#crashed.ExpSeq .
  eq #up(#bottom) = '#bottom.ExpSeq .
  eq #up(begin EXSEQ end) = 'begin_end[#up(EXSEQ)] .


  op #up : FunDef -> Term [memo] .
  eq #up(fun FNAME ()-> EXSEQ .) = 'fun_`(`)->_[#up(FNAME), #up(EXSEQ)] .
  eq #up(fun FNAME (ARGS)-> EXSEQ .) = 'fun_`(_`)->_[#up(FNAME), #up(ARGS), #up(EXSEQ)] .

  op #up : Mult -> Term [memo] .
  eq #up(EX1 * EX2) = '_*_[#up(EX1), #up(EX2)] .

  op #up : Minus -> Term [memo] .
  eq #up(EX1 - EX2) = '_-_[#up(EX1), #up(EX2)] .

  op #up : Case -> Term [memo] .
  eq #up(case EX of CLS end) = 'case_of_end[#up(EX),#up(CLS)] .

  op #up : List -> Term [memo] .
  eq #up([EX]) = '`[_`][#up(EX)] .
  eq #up([EX1 | EX2]) = '`[_|_`][#up(EX1), #up(EX2)] .

  op #up : Pattern -> Term [memo] .

  op #up : Clause -> Term [memo] .
  eq #up(EX -> EXSEQ) = '_->_[#up(EX), #up(EXSEQ)] .

  op #up : ClauseSeq -> Term [memo] .
  eq #up(CLS1 ; CLS2) = '_;_[#up(CLS1), #up(CLS2)] .

	*** all the terms with outermost operator symbol _,_ __ or _=_

  vars FUNDEFSEQ1 FUNDEFSEQ2 : FunDefSeq .

  op #up : FunDefSeq -> Term [memo] .
  eq #up(FUNDEFSEQ1 FUNDEFSEQ2) = '_`,_[#up(FUNDEFSEQ1), #up(FUNDEFSEQ2)] .

  op #up : Match -> Term [memo] .
  eq #up(PAT = EX) = '_=_[#up(PAT), #up(EX)] .

  op #up : FunCall -> Term [memo] .
  eq #up(EX()) = '_`(`)[#up(EX)] .
  eq #up(_`(_`)(EX, EXSEQ)) = '_`(_`)[#up(EX), #up(EXSEQ)] .
  eq #up(EX1 : EX2 (EXSEQ)) = '_:_`(_`)[#up(EX1), #up(EX2), #up(EXSEQ)] .

  op #up : Send -> Term [memo] .
  eq #up(EX1 ! EX2) = '_!_[#up(EX1), #up(EX2)] .
  eq #up(receive CLS end) = 'receive_end[#up(CLS)] .

endfm
