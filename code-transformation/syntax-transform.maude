
*** This module takes in input another maude module, which follows the standard defined in \cite{..},
*** and transforms it in a module that preserves the semantics but also includes the concept of keys.
*** The transformation adds the sort 'EntityWithKey' to the sorts of the module, extends the set of
*** subsorts by extending the sort 'Sys' with 'EnitityWithKey' and then traverses the equations and
*** rules of the module and replaces each occurrence of the var 'Entity' and replaces it with a variable
*** 'EntityWithKey'.

fmod SYNTAX-TRANSFORM is

  protecting META-LEVEL .
  protecting HELPER .
  protecting STRING .

  vars FMOD : FModule .
  vars T1 T2 : Term .
  vars QID OPNAME : Qid .
  var H : Header .
  var M : Module .
  vars I I' : Import .
  var IL : ImportList .
  var SS : SortSet .
  var SSDS : SubsortDeclSet .
  var OPDS : OpDeclSet .
  var MAS : MembAxSet .
  var EQ : Equation .
  vars EQS : EquationSet .
  vars EQCOND EQCOND' EQCOND'' : EqCondition .
  var RLS : RuleSet .
  var ATT : AttrSet .
  vars TERMS TERMS' : TermList .
  var VAR : Variable .
  var CONST : Constant .

*** transform-syntax-mod acts as entry point for the transformation, takes in
*** input a module, adds the sort 'EntityWithKey' and proceed by
*** transforming the equations.
*** Before being transformed the equations from a set are transformed
*** to a list, since it easier to manipulate it later.
  op #transform-syntax-mod : Module -> Module .
  eq #transform-syntax-mod(mod H is IL sorts SS . SSDS OPDS MAS EQS RLS endm) =
    mod H is
     #updateImportList(IL)
     sorts #addSort(SS) .
     #updateSubsortDeclSet(SSDS)
     #updateOperatorDeclSet(OPDS)
     MAS
     #updateEquations(EQS)
     RLS
    endm .

  op #updateImportList : ImportList -> ImportList .
  eq #updateImportList((protecting 'SEM_ENTITY .) IL)
     = (protecting 'SEM_ENTITY_WITH_KEY .) (protecting 'CONTEXT .) IL .
  eq #updateImportList(I IL) = I #updateImportList(IL) .

  op #updateOperatorDeclSet : OpDeclSet -> OpDeclSet .
  eq #updateOperatorDeclSet(OPDS)
     = (op '_x_ : ('Qid 'NatList) -> 'ActKey [ctor prec (10)] .
        op '`[_;_;_`] : ('ActKey 'Sys 'Sys) -> 'Memory
         [ctor frozen(1 2) prec(40) format('sg! 'o 'g! 'o 'g! 'o 'g! 'o) ] .
        OPDS) .

  op #addSort : SortSet -> SortSet .
  eq #addSort(SS)
     = SS ; 'Memory ; 'ActKey .

  op #updateSubsortDeclSet : SubsortDeclSet -> SubsortDeclSet .
  eq #updateSubsortDeclSet(SSDS)
     = (subsort 'EntityWithKey < 'Sys .
        subsort 'Memory < 'Sys .
        subsort 'Qid < 'Sys .
        subsort 'Memory < 'Entity .
        subsort 'SContext < 'Sys . SSDS) .

  op #updateEquations : EquationSet -> EquationSet .
  eq #updateEquations(EQ) = #updateEquation(EQ) .
  ceq #updateEquations(EQ EQS) = #updateEquation(EQ) #updateEquations(EQS)
      if EQS =/= none .

  var CONDITION : Condition .
  var ATTRSET : AttrSet .
  var OP : Qid .
  var T T' TAGGED SX KEY VARIABLE : Term .
  var CONSTOP : Constant .
  var ENTITYVAR : Variable .

  op #updateTermSX : Term Term -> Term .

  ceq #updateTermSX(OP[TERMS], KEY) = '_*_[OP[TERMS], #freshKey(KEY)]
    if #declared-in(upModule('SEM_ENTITY, false), OP) .
  ceq #updateTermSX(CONSTOP, KEY) = '_*_[CONSTOP, #freshKey(KEY)]
    if #declared-in(upModule('SEM_ENTITY, false), getName(CONSTOP)) .
  ceq #updateTermSX(ENTITYVAR, KEY) = '_*_[ENTITYVAR, #freshKey(KEY)]
    if #declared-in(upModule('SEM_ENTITY, false), getType(ENTITYVAR)) .
  ceq #updateTermSX(OP[TERMS], KEY) = OP[#updateTermSX(TERMS, #freshKey(KEY))]
    if #declared-in(upModule('SYSTEM, false), OP) .
  ceq #updateTermSX((T, TERMS), KEY) = #updateTermSX(T, KEY), #updateTermSX(TERMS, #freshKey(KEY))
    if TERMS =/= empty .
  eq #updateTermSX(T, KEY) = T .


  op #updateTermDX : Term Term -> Term .

  ceq #updateTermDX(SX, OP[TERMS]) = '_*_[OP[TERMS], KEY]
    if #declared-in(upModule('SEM_ENTITY, false), OP) /\
       KEY := #get-key(SX, OP[TERMS]) .
  ceq #updateTermDX(SX, CONSTOP) = '_*_[CONSTOP, KEY]
    if KEY := #get-key(SX, CONSTOP) .
  ceq #updateTermDX(SX, T) = '_*_[T, KEY]
    if KEY := #get-key(SX, T) .
  eq #updateTermDX(SX, OP[TERMS]) = OP[#updateTermDX(SX, TERMS)] .
  eq #updateTermDX(SX, '__[TERMS]) = '__[#updateTermDX(SX, TERMS)] .
  ceq #updateTermDX(SX, (T, TERMS)) =
       #updateTermDX(SX, T), #updateTermDX(SX, TERMS)
    if TERMS =/= empty .
  eq #updateTermDX(SX, T) = T [print SX "    " T "\n"] .

  op #get-key : Term Term -> TermList .
  eq #get-key('_*_[OP[TERMS], KEY], OP[TERMS']) = KEY .
  eq #get-key('_*_[CONSTOP, KEY], CONSTOP) = KEY .
  eq #get-key('_*_[VARIABLE, KEY], VARIABLE) = KEY .
  eq #get-key(OP[TERMS], KEY) = #get-key(TERMS, KEY) .
  ceq #get-key((T, TERMS), KEY) =
      #get-key(T, KEY), #get-key(TERMS, KEY)
    if TERMS =/= empty .
  eq #get-key(T, T') = empty [print T "  " T'].

  op #updateEquation : Equation -> Equation .

  ceq #updateEquation( eq T1 = T2 [ATTRSET] . ) =
     eq SX = #updateTermDX(SX, T2) [ATTRSET] .
     if SX := #updateTermSX(T1, 'K:Key) .
  ceq #updateEquation( ceq T1 = T2 if EQCOND [ATTRSET] . ) =
     ceq SX = #updateTermDX(SX, T2) if EQCOND [ATTRSET] .
     if SX := #updateTermSX(T1, 'K:Key) .



endfm
