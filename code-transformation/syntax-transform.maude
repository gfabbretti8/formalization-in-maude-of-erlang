
*** This module takes in input another maude module, which follows the standard defined in \cite{..},
*** and transforms it in a module that preserves the semantics but also includes the concept of keys.
*** The transformation adds the sort 'EntityWithKey' to the sorts of the module, extends the set of
*** subsorts by extending the sort 'Sys' with 'EnitityWithKey' and then traverses the equations and
*** rules of the module and replaces each occurrence of the var 'Entity' and replaces it with a variable
*** 'EntityWithKey'.

fmod SYNTAX-TRANSFORM is

  protecting META-LEVEL .
  protecting HELPER .
  protecting STRING .

  vars FMOD : FModule .
  vars T1 T2 : Term .
  vars QID OPNAME : Qid .
  var H : Header .
  var M : Module .
  vars I I' : Import .
  var IL : ImportList .
  var SS : SortSet .
  var SSDS : SubsortDeclSet .
  var OPDS : OpDeclSet .
  var MAS : MembAxSet .
  var EQ : Equation .
  var EQL : EquationList .
  vars EQS : EquationSet .
  vars EQCOND EQCOND' EQCOND'' : EqCondition .
  var RLS : RuleSet .
  var ATT : AttrSet .
  vars TERMS TERMS' : TermList .
  var VAR : Variable .
  var CONST : Constant .

*** transform-syntax-mod acts as entry point for the transformation, takes in
*** input a module, adds the sort 'EntityWithKey' and proceed by
*** transforming the equations.
*** Before being transformed the equations from a set are transformed
*** to a list, since it easier to manipulate it later.
  op #transform-syntax-mod : Module -> Module .
  eq #transform-syntax-mod(mod H is IL sorts SS . SSDS OPDS MAS EQS RLS endm) =
    mod H is
     #updateImportList(IL)
     sorts #addSort(SS) .
     #updateSubsortDeclSet(SSDS)
     #updateOperatorDeclSet(OPDS)
     MAS
     #updateEquations(EQS)
     RLS
    endm .

  op #updateImportList : ImportList -> ImportList .
  eq #updateImportList((protecting 'SEM_ENTITY .) IL)
     = (protecting 'SEM_ENTITY_WITH_KEY .) (protecting 'CONTEXT .) IL .
  eq #updateImportList(I IL) = I #updateImportList(IL) .

  op #updateOperatorDeclSet : OpDeclSet -> OpDeclSet .
  eq #updateOperatorDeclSet(OPDS)
     = (op '`[_;_`] : ('Sys 'Sys) -> 'Memory
         [ctor frozen(1 2) prec(40) format('sg! 'o 'g! 'o 'g! 'o) ] .
        op '#downMemory : 'Term -> 'Memory [memo] .
        OPDS) .

  op #addSort : SortSet -> SortSet .
  eq #addSort(SS)
     = SS ; 'Memory .

  op #updateSubsortDeclSet : SubsortDeclSet -> SubsortDeclSet .
  eq #updateSubsortDeclSet(SSDS)
     = (subsort 'EntityWithKey < 'Sys .
        subsort 'Memory < 'Sys .
        subsort 'Memory < 'Entity .
        subsort 'SContext < 'Sys . SSDS) .

  op #updateEquations : EquationSet -> EquationSet .
  eq #updateEquations(EQS) =
     (eq '#up['`[_;_`]['SYS:Sys, 'CTX:Sys]] =
     '_`[_`][''`[_;_`].Sort, '_`,_['#up['SYS:Sys], '#up['CTX:Sys]]] [none] .)
     (eq '#downEntity['_`[_`][''`[_;_`].Sort, '_`,_['T1:Term, 'T2:Term]]] =
     '#downMemory['_`[_`][''`[_;_`].Sort, '_`,_['T1:Term, 'T2:Term]]] [none] .)
     (eq '#downMemory['_`[_`][''`[_;_`].Sort, '_`,_['T1:Term, 'T2:Term]]] = '`[_;_`]['#downSystem['T1:Term], '#downSystem['T2:Term]] [none] .)
     ( eq '#downSystem['_`[_`][''_*_.Sort, '_`,_['T1:Term, 'T2:Term]]] = '#downEntityWithKey['_`[_`][''_*_.Sort, '_`,_['T1:Term, 'T2:Term]]] [none] .)
     EQS .

endfm
