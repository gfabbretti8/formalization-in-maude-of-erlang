***(

	MATCHING.MAUDE

	In this file we implement the pattern matching code. Both Maude modules
	that are defined here are functional modules. This is important as they
	are used within the conditions of the equations of the underlying
	equational theory.

	First, ordinary pattern matching is specified in the SEM_MATCH functional
	module. The #match operation takes a pattern and a constant and tries to
	match the pattern against the constant.

	Second, the SEM_MATCH_ENTITY functional module defines the more subtle
	operations needed to match the clauses of a receive statement against
	the contents of a entity.
	The reception of messages is more complicated as it uses two levels
	of recursion: The clauses are recursively matched against the first
	message in the entity; if there is no match, the clause list is
	again matched against the remaining messages. The recursion terminates
	when the first match is found or every message of the entity has failed
	to match any clause.
	As the clauses may contain guards (additional conditions that control 
	if the clause may be evaluated in case of a matching pattern), we need the
	equational theory to evaluate the guard expressions. Note however,
	that according to the Core-Erlang semantics, there must not occur any 
	system level transitions during the evaluation of a guard (i.e. no send
	or receive statements, etc). Therefore the equational theory suffices
	and we never have to switch to the rewriting rules of the system level.

***)

mod SEM_MATCH is
	protecting SYNTAX .
  protecting SEM_STORE .

  sort Store? .
  subsort Store < Store? .

	*** The #nomatch constructor indicates the failure of a matching
	*** operation. If it is included in a variable environment and since
	*** it is not of sort Env, the resulting term is of kind [Env?].
	*** In this way, we distinguish between successful and unsuccessful
	*** matching operations.
	op #nomatch : -> Store? [ctor] .

	*** The #match operation tries to match the given pattern with the
	*** constant provided as second argument. Because there may be many
	*** variables that have to be bound to unify the two terms, the
	*** result term is of sort Env (and not just a single Binding).
	op #match : Pattern GroundValues Store ~> Store .

	vars GVALUE GVALUE1 GVALUE2 : GroundValues .
	var PATSEQ : Pattern .
	vars PAT PAT1 PAT2 : Pattern .
  var STORE : Store .
  var VAR : Var .


	*** A pattern may be a list. Therefore we match a list of patterns
	*** against a list of constants by pairwise matching the list elements.
	eq #match([PAT1 | PAT2], [GVALUE1 | GVALUE2], STORE)
     = #match(PAT1, GVALUE1, STORE), #match(PAT2, GVALUE2, STORE) .

  *** A var can be undefined, that means that it is fresh and we must bind it to
  *** the new value and then we return the updated store.
  ceq #match(VAR, GVALUE, STORE)
      = insert(VAR, GVALUE, STORE)
      if STORE[VAR] == undefined .

  *** A var can be defined, if the value matches the ground value(s) then potentially
  *** there is a match and we return the store
  ceq #match(VAR, GVALUE, STORE)
      = STORE
      if STORE[VAR] =/= undefined /\ STORE[VAR] == GVALUE .

  *** A var can be defined, if the value does not match the ground value(s) then there is
  *** no match with this branch of the receive
  ceq #match(VAR, GVALUE, STORE)
      = #nomatch
      if STORE[VAR] =/= undefined /\ STORE[VAR] =/= GVALUE .

	*** The second case: Two identical terms are unified (without the need to
	*** bind any variables)
	*** Note: The cases of matching two empty lists [] or two 0-ary tuples {}
	***       are implicitly covered here, too.
	eq #match(GVALUE, GVALUE, STORE) = STORE .

	*** All other cases lead to an incorrect matching.
	eq #match(PAT, GVALUE, STORE) = #nomatch [owise] .

endm

mod SEM_MATCH_ENTITY is
	extending SYNTAX .
	protecting SEM_MATCH .
  protecting SEM_STORE .
  protecting SEM_ENTITY .
	sort ClauseMatchResult .

  op #empty-clauselist : -> ClauseSeq [ctor] .

	op #entityMatchSuccess(_|_) : Exp Store -> ClauseMatchResult [ctor] .

	op #entityMatchFailure : -> ClauseMatchResult [ctor] .

	var CLAUSE : Clause .
	var CLSEQ : ClauseSeq .
	var PAT : Pattern .
	var EXSEQ : NeExpSeq .
  var E : Entity .
  var MSG : GroundValues .
  var STORE STORE' : Store .


	op #entityMatch(_|_|_) : ClauseSeq GroundValues Store -> ClauseMatchResult .
  ceq #entityMatch(CLAUSE ; CLSEQ | MSG | STORE)
     = #entityMatchSuccess(EXSEQ | STORE')
		if PAT -> EXSEQ := CLAUSE /\ STORE' := #match(PAT, MSG, STORE) .
  eq #entityMatch(CLAUSE ; CLSEQ | MSG | STORE)
     = #entityMatch(CLSEQ | MSG | STORE) [owise] .
	eq #entityMatch(#empty-clauselist | MSG | STORE) = #entityMatchFailure .

endm
