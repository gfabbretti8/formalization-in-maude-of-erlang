mod SYSTEM is including BOOL . protecting META-LEVEL . protecting MAUDE-SYNTAX-UPDOWN . protecting SEM_ENTITY_WITH_KEY . protecting CONTEXT . protecting SEM_MESSAGE . protecting SEM_PID . protecting SEM_MODENV . protecting SEM_PROCESS . sorts Memory Sys . subsort Entity < Sys . subsort EntityWithKey < Sys . subsort Memory < Entity . subsort Memory < Sys . subsort SContext < Sys . op #setup-first-proc : Sys FunName FunDefSeq GroundValues -> Sys . op #downMemory : Term -> Memory [memo] . op #downSystem : Term -> Sys [memo strat(1 0)] . op #empty-system : -> Sys [ctor] . op _||_ : Sys Sys -> Sys [assoc comm id: #empty-system prec 90 format(d sm! o d)ctor] . op `[_;_`] : Sys Sys -> Memory [prec 40 format(sg! o g! o g! o)ctor frozen(1 2)] . eq #downEntity('`[_;_`][T1:Term,T2:Term]) = #downMemory('`[_;_`][T1:Term,T2:Term]) . eq #downMemory('`[_;_`][T1:Term,T2:Term]) = [#downSystem(T1:Term); #downSystem(T2:Term)] . eq #downSystem('#empty-system.Sys) = #empty-system . eq #downSystem('_*_[T1:Term,T2:Term]) = #downEntityWithKey('_*_[T1:Term,T2:Term]) . eq #up(#empty-system) = '#empty-system.Sys . eq #up( [SYS:Sys ; CTX:Sys]) = '`[_;_`][#up(SYS:Sys),#up(CTX:Sys)] . ceq #downSystem(T:Term) = #downEntity(T1:Term) || #downSystem(T2:Term) if SUB:Substitution := metaMatch(GRAMMAR,'_||_['E:Entity,'SYS:Sys],T:Term, nil,0)/\ 'E:Entity <- T1:Term ; 'SYS:Sys <- T2:Term := SUB:Substitution . ceq #setup-first-proc(SYS:Sys,ENTRYPOINT:FunName,MOD:FunDefSeq,ARGS:Args) = pidGen(0) * key 0 || < pid(0)| exp: EXSEQ:NeExpSeq,env-stack: ENV:EnvStack, mod-env: ME:ModEnv > * key 1 if ME:ModEnv := #extract-functions(MOD:FunDefSeq)/\ EXSEQ:NeExpSeq := #get-function(ENTRYPOINT:FunName,ME:ModEnv)/\ ENV:EnvStack := #init-env( #get-formal-args(ENTRYPOINT:FunName,ME:ModEnv),ARGS:Args) . ceq #up(SYS:Sys || E:Entity) = '_||_[#up(E:Entity),#up(SYS:Sys)] if SYS:Sys =/= #empty-system = true . endm 
