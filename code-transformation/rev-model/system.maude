

	          


mod SEM_TRANSITIONS is
  protecting SEM_ENTITY_WITH_KEY .
  including BOOL .
  protecting SYNTAX .
  protecting SEM_LABEL .
  protecting SEM_ENTITIES .
  protecting SEM_MATCH_ENTITY .
  protecting SEM_NORMALISATION .
  protecting SEM_PROCESS .
  protecting HELP-SYNTAX .
  op #setup-first-proc : Entities FunName FunDefSeq GroundValues -> Entities .
  ceq #setup-first-proc(ENTS:Entities,ENTRYPOINT:FunName,MOD:FunDefSeq,
    ARGS:Args)
    = pidGen(0) || < pid(0)| exp: EXSEQ:NeExpSeq,store-stack: STORE:StoreStack,
    mod-env: ME:ModEnv >
    if ME:ModEnv := #extract-functions(MOD:FunDefSeq)/\ EXSEQ:NeExpSeq :=
    #get-function(ENTRYPOINT:FunName,ME:ModEnv)/\ STORE:StoreStack :=
    #init-store(#get-formal-args(ENTRYPOINT:FunName,ME:ModEnv),ARGS:Args) .
  crl < P:Pid | ASET:AttributeSet,exp: EXSEQ:NeExpSeq,store-stack:
    STORE:StoreStack > * key N:NatList
    => < P:Pid | exp: #crashed,ASET:AttributeSet,store-stack: STORE':StoreStack
    > * key(0 N:NatList) || [< P:Pid | ASET:AttributeSet,exp: EXSEQ:NeExpSeq,
    store-stack: STORE:StoreStack > * key N:NatList ; @: key(0 N:NatList)]
    if < crashed,STORE':StoreStack,EXSEQ':NeExpSeq > := < req-gen,
    STORE:StoreStack,EXSEQ:NeExpSeq > [label sys-crash] .
  crl < P:Pid | ASET:AttributeSet,exp: EXSEQ:NeExpSeq,store-stack:
    STORE:StoreStack > * key N:NatList
    => < P:Pid | exp: EXSEQ':NeExpSeq,ASET:AttributeSet,store-stack:
    STORE':StoreStack > * key(0 N:NatList) || [< P:Pid | ASET:AttributeSet,exp:
    EXSEQ:NeExpSeq,store-stack: STORE:StoreStack > * key N:NatList ; @: key(0
    N:NatList)]
    if < tau,STORE':StoreStack,EXSEQ':NeExpSeq > := < req-gen,STORE:StoreStack,
    EXSEQ:NeExpSeq > [label sys-tau] .
  crl < P:Pid | ASET:AttributeSet,exp: EXSEQ:NeExpSeq,store-stack:
    STORE:StoreStack > * key N:NatList
    => < P:Pid | exp: EXSEQ':NeExpSeq,ASET:AttributeSet,store-stack:
    STORE':StoreStack > * key(0 N:NatList) || [< P:Pid | ASET:AttributeSet,exp:
    EXSEQ:NeExpSeq,store-stack: STORE:StoreStack > * key N:NatList ; @: key(0
    N:NatList)]
    if < tau,STORE':StoreStack,EXSEQ':NeExpSeq > := < self(P:Pid),
    STORE:StoreStack,EXSEQ:NeExpSeq > [label sys-self] .
  crl < P:Pid | ASET:AttributeSet,exp: EXSEQ:NeExpSeq,store-stack:
    STORE:StoreStack > * key N:NatList
    => (< sender: P:Pid,receiver: DEST:Pid,payload: GVALUE:GroundValues > *
    key(0 N:NatList) || < P:Pid | exp: EXSEQ':NeExpSeq,ASET:AttributeSet,
    store-stack: STORE':StoreStack > * key(1 N:NatList)) || [< P:Pid |
    ASET:AttributeSet,exp: EXSEQ:NeExpSeq,store-stack: STORE:StoreStack > * key
    N:NatList ; @: key(0 N:NatList) || @: key(1 N:NatList)]
    if < DEST:Pid ! GVALUE:GroundValues,STORE':StoreStack,EXSEQ':NeExpSeq > :=
    < req-gen,STORE:StoreStack,EXSEQ:NeExpSeq > [label sys-send] .
  crl < P:Pid | ASET:AttributeSet,exp: EXSEQ:NeExpSeq,store-stack:
    STORE:StoreStack,mod-env: ME:ModEnv > * key N:NatList
    => < P:Pid | exp: EXSEQ':NeExpSeq,store-stack: STORE':StoreStack,
    ASET:AttributeSet,mod-env: ME:ModEnv > * key(0 N:NatList) || [< P:Pid |
    ASET:AttributeSet,exp: EXSEQ:NeExpSeq,store-stack: STORE:StoreStack,
    mod-env: ME:ModEnv > * key N:NatList ; @: key(0 N:NatList)]
    if < tau,STORE':StoreStack,EXSEQ':NeExpSeq > := < funcall(ME:ModEnv),
    STORE:StoreStack,EXSEQ:NeExpSeq > [label sys-funcall] .
  crl < sender: SENDER:Pid,receiver: P:Pid,payload: GVALUE:GroundValues > * key
    N:NatList || < P:Pid | ASET:AttributeSet,exp: EXSEQ:NeExpSeq,store-stack:
    STORE:StoreStack > * key N':NatList
    => < P:Pid | exp: EXSEQ':NeExpSeq,ASET:AttributeSet,store-stack:
    STORE':StoreStack > * key(0 N':NatList N:NatList) || [< sender: SENDER:Pid,
    receiver: P:Pid,payload: GVALUE:GroundValues > * key N:NatList || < P:Pid |
    ASET:AttributeSet,exp: EXSEQ:NeExpSeq,store-stack: STORE:StoreStack > * key
    N':NatList ; @: key(0 N':NatList N:NatList)]
    if < received,STORE':StoreStack,EXSEQ':NeExpSeq > := < req-receive(
    GVALUE:GroundValues),STORE:StoreStack,EXSEQ:NeExpSeq > [label sys-receive]
    .
  crl pidGen(INT:Int)* key N:NatList || < P:Pid | ASET:AttributeSet,exp:
    EXSEQ:NeExpSeq,store-stack: STORE:StoreStack,mod-env: ME:ModEnv > * key
    N':NatList
    => ((pidGen(INT:Int + 1)* key(0 N':NatList N:NatList) || < pid(INT:Int +
    1)| exp: EXSEQ'':NeExpSeq,store-stack: STORE'':StoreStack,mod-env:
    ME:ModEnv > * key(1 N':NatList N:NatList)) || < P:Pid | exp:
    EXSEQ':NeExpSeq,store-stack: STORE':StoreStack,ASET:AttributeSet,mod-env:
    ME:ModEnv > * key(1 N':NatList N:NatList)) || [pidGen(INT:Int)* key
    N:NatList || < P:Pid | ASET:AttributeSet,exp: EXSEQ:NeExpSeq,store-stack:
    STORE:StoreStack,mod-env: ME:ModEnv > * key N':NatList ;(@: key(0
    N':NatList N:NatList) || @: key(1 N':NatList N:NatList)) || @: key(1
    N':NatList N:NatList)]
    if < spawn(FUNNAME:FunName,ARGS:Args),STORE':StoreStack,EXSEQ':NeExpSeq >
    := < req-spawn(pid(INT:Int + 1)),STORE:StoreStack,EXSEQ:NeExpSeq > /\
    EXSEQ'':NeExpSeq := #get-function(FUNNAME:FunName,ME:ModEnv)/\ ARGS':Args
    := #map-args(ARGS:Args,STORE':StoreStack)/\ STORE'':StoreStack :=
    #init-store(#get-formal-args(FUNNAME:FunName,ME:ModEnv),#flatten-list(
    ARGS':Args)) [label sys-spawn] .
endm

