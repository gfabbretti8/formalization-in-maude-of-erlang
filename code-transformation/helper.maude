

*** This module contains functions that manipulate data structure and transform them from one to
*** another.

  fmod HELPER is

  protecting QID .
  protecting META-LEVEL .
  protecting LEXICAL .

  sort NeEquationList EquationList .
  sort NeRuleList RuleList .

  subsort Equation < NeEquationList .
  subsort NeEquationList < EquationList .

  subsort Rule < NeRuleList .
  subsort NeRuleList < RuleList .

  op #empty-list : -> EquationList [ctor] .
  op _,_ : EquationList EquationList -> EquationList [ctor id: #empty-list] .
  op #set-to-list : EquationSet -> EquationList .

  op #empty-list : -> RuleList [ctor] .
  op _,_ : RuleList RuleList -> RuleList [ctor id: #empty-list] .
  op #set-to-list : RuleSet -> RuleList .


  op #conc : Qid Qid -> Qid .

  var Q1 Q2 : Qid .
  var EQ : Equation .
  var EQS : EquationSet .

  var RL : Rule .
  var RLS : RuleSet .

  ceq #set-to-list(EQ EQS) = EQ, #set-to-list(EQS)
      if EQS =/= none .
  eq #set-to-list(EQ) = EQ [owise] .

  ceq #set-to-list(RL RLS) = RL, #set-to-list(RLS)
      if RLS =/= none .
  eq #set-to-list(RL) = RL [owise] .

  eq #conc(Q1, Q2) = qid(string(Q1) + string(Q2)) .

  var M : Module .
  vars OP NAME : Qid .
  var TYPES : TypeList .
  var TYPE : Type .
  var ATTR : AttrSet .
  var OTHERS OPDELSET : OpDeclSet .
  var QIDSET : QidList .
  var B : Bool .

  op #declared-in : Module Qid -> Bool .

  eq #declared-in(M, OP) = occurs(OP, #get-ops-name(getOps(M))) .

  op #get-ops-name : OpDeclSet -> QidList .

  ceq #get-ops-name(op NAME : TYPES -> TYPE [ATTR] . OTHERS )
     = NAME #get-ops-name(OTHERS)
     if OTHERS =/= none .
  eq #get-ops-name(op NAME : TYPES -> TYPE [ATTR] . OTHERS ) = NAME .

  endfm


fmod FUNC{X :: TRIV, Y :: TRIV} is

sort Func{X,Y} .
op _[_,_] : Func{X,Y} X$Elt Y$Elt -> Y$Elt [prec 17] .

endfm

view Term from TRIV to META-TERM is
  sort Elt to Term .
endv

fmod FOLD{Y :: TRIV} is

inc FUNC{Term, Y} .
pr META-TERM .

op foldl-term : TermList Y$Elt Func{Term,Y} -> Y$Elt .

var H : Term .
var TL : TermList .
var C : Y$Elt .
var F : Func{Term, Y} .

eq foldl-term(empty, C, F) = C .
eq foldl-term((H, TL), C, F) = foldl-term(TL, F[H,C], F) .

endfm


